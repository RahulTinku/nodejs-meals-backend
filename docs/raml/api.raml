#%RAML 1.0
title: Calories REST
version: v1
protocols: [ HTTP ]
baseUri: http://vignesarul.info/api/{version}
mediaType: application/json

types:
  forgot-password: !include includes/schemas/post.auth.forgot-password.json
  reset-password: !include includes/schemas/post.auth.reset-password.json
  login: !include includes/schemas/post.auth.login.json
  create-user: !include includes/schemas/post.users.json
  user-update: !include includes/schemas/put.users.update.json
  activate-user: !include includes/schemas/put.users.activate.json
  update-password: !include includes/schemas/put.users.update-password.json
  update-roles: !include includes/schemas/put.users.update-roles.json
  create-meal: !include includes/schemas/post.meals.json
  update-meal: !include includes/schemas/put.meals.update.json

securitySchemes:
  jwt:
    description: |
      Authorization with jwt token
    type: x-jwt
    describedBy:
      headers:
        Authorization:
          description: |
             Valid jwt token
          example: |
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWV9.TJVA95OrM7E2cBab30RMHrHDcEfxjoYZgeFONFh7HgQ
      responses:
        401:
          description: |
            Bad or expired token.
        403:
          description: |
            Access denied not valid privilage in resurces

/users:
  get:
    securedBy: [jwt]
    description: List all users
    queryParameters:
      filter:
        description: "Accepts a filter query"
        example: (date eq '2016-05-01') AND ((number_of_calories gt 20) OR (number_of_calories lt 10))
        required: false
        type: string
      page:
        description: "Page number required"
        example: 2
        required: false
        type: number
      limit:
        description: "Number of records required per page"
        example: 5
        required: false
        type: number
    responses:
      200:
        body:
          application/json:
            example: !include includes/examples/get.users.res.json
  post:
    description: Create new user
    body:
      application/json:
        type: create-user
        example: !include includes/examples/post.users.req.json
    responses:
      201:
        body:
          application/json:
            example: !include includes/examples/post.users.res.json
  /{userId}:
    put:
      securedBy: [jwt]
      description: Update user's record
      body:
        application/json:
          type: user-update
          example: !include includes/examples/put.users.update.req.json
      responses:
        200:
          body:
            application/json:
              example: !include includes/examples/put.users.update.res.json
    get:
      securedBy: [jwt]
      description: Get a single user data
      body:
      responses:
        200:
          body:
            application/json:
              example: !include includes/examples/get.users.user.res.json
    delete:
      securedBy: [jwt]
      description: Delete an user record & linked meal records
      responses:
        204:
          body:
            application/json:
              example: !include includes/examples/delete.users.user.res.json
    /activate:
      put:
        description: Confirm an user account after user creation. This is a mandatory process before first time login
        body:
          application/json:
            type: activate-user
            example: !include includes/examples/put.users.activate.req.json
        responses:
          200:
            body:
              application/json:
                example: !include includes/examples/put.users.activate.res.json
    /password:
      put:
        securedBy: [jwt]
        description: Update an user's password using user's token
        body:
          application/json:
            type: update-password
            example: !include includes/examples/put.users.update-password.req.json
        responses:
          200:
            body:
              application/json:
                example: !include includes/examples/put.users.update-password.res.json
    /roles:
      put:
        securedBy: [jwt]
        description: Update an user's role using admin's / user-manager's token
        body:
          application/json:
            type: update-roles
            example: !include includes/examples/put.users.update-roles.req.json
        responses:
          200:
            body:
              application/json:
                example: !include includes/examples/put.users.update-roles.res.json
    /meals:
      get:
        securedBy: [jwt]
        description: List meal records associated with an user
        queryParameters:
          filter:
            description: "Accepts a filter query"
            example: (date eq '2016-05-01') AND ((number_of_calories gt 20) OR (number_of_calories lt 10))
            required: false
            type: string
          page:
            description: "Page number required"
            example: 2
            required: false
            type: number
          limit:
            description: "Number of records required per page"
            example: 5
            required: false
            type: number
        responses:
          200:
            body:
              application/json:
                example: !include includes/examples/get.meals.res.json
      post:
        securedBy: [jwt]
        description: Create a meal record for an user
        body:
          application/json:
            type: create-meal
            example: !include includes/examples/post.meals.req.json
        responses:
          202:
            body:
              application/json:
                example: !include includes/examples/post.meals.res.json
      /{mealId}:
        put:
          securedBy: [jwt]
          description: Update a  meal
          body:
            application/json:
              type: update-meal
              example: !include includes/examples/put.meals.update.req.json
          responses:
            202:
              body:
                application/json:
                  example: !include includes/examples/put.meals.update.res.json
        get:
          securedBy: [jwt]
          description: Get a meal belongs to a particular user
          responses:
            200:
              body:
                application/json:
                  example: !include includes/examples/get.meals.meal.res.json
        delete:
          securedBy: [jwt]
          description: Delete a meal belongs to user
          responses:
            204:
              body:
                application/json:
                  example: !include includes/examples/delete.meals.meal.res.json
/auth:
  description: Handles login, reset password, forgot password
  /login:
      post:
        description: Login using email and password and get a jwt access token
        body:
          application/json:
            type: login
            example: !include includes/examples/post.auth.login.req.json
        responses:
          200:
            body:
              application/json:
                example: !include includes/examples/post.auth.login.res.json
  /forgot-password:
    description: Initiate forgot password.
    post:
      description: Initiate forgot password email
      body:
        application/json:
          type: forgot-password
          example: !include includes/examples/post.auth.forgot-password.req.json
      responses:
        200:
          body:
            application/json:
              example: !include includes/examples/post.auth.forgot-password.res.json
  /reset-password:
    post:
      description: Reset user's password using email and unique code generated at forgot-password
      body:
        application/json:
          type: reset-password
          example: !include includes/examples/post.auth.reset-password.req.json
      responses:
        200:
          body:
            application/json:
              example: !include includes/examples/post.auth.reset-password.res.json